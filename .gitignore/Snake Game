#include <cstdlib>
#include <ncurses.h>

bool gameOver;
//height and width of the game map
const int width = 20, height = 20;
//variables
int x,y, FruitX, FruitY, score;
// direction of the head of the snake
enum eDirection {STOP = 0, LEFT, RIGHT, UP, DOWN};
//holds the direction of the snake
eDirection dir;
//tail variables. 100 determines the maximum fruits that can be picked up
int TailX[100], TailY[100];
int nTail = 0;

// 4 Functions
void Setup()
{

    gameOver = false;
    dir = STOP;
    // we want the head to be in the middle when we start the game
    x = width/2;
    y = height/2;
    //Fruits must be located randomly on the game board
    FruitX = (rand()% width);
    FruitY = (rand()% height);
    score = 0;

}

void Draw()
{


//loops and if statements
    for (int i = 0; i < width; i++)
        mvprintw(0,i,"+");

    for (int i = 0; i < height; i++)
    {
        for (int j = 0; j < width; j++)
        {
            // creates boundaries of the game board
            if (i == 0 | i == 21)
                mvprintw(i,j,"+");
                // side walls
            else if (j == 0 | j == 21)
                mvprintw(i,j,"+");
                // head of the snake
            else if (i == y && j == x)
                mvprintw(i,j,"O");
                //printing the fruits
            else if (i == FruitY && j == FruitX)
                mvprintw(i,j,"0");
            else
                //find all of the points where the tail needs to be
                for (int k = 0; k < nTail; k++)
                {
                    if (TailX[k] == j && TailY[k] == i)
                        mvprintw(i,j,"o");

                }

        }
    }
// position of the score below the board
    mvprintw(23,0,"Score %d",score);
    //displays
    refresh();


}

void Input()
{
    //keypad function tells the computer to watch out for any actions
    keypad(stdscr, TRUE);
    //determines the speed of the game.
    halfdelay(1);

    int C = getch();
    //switches the direction depending on the key pressed
    switch (C)
    {
        //sets directions based on the keys
        case KEY_LEFT:
            dir = LEFT;
            break;
        case KEY_RIGHT:
            dir = RIGHT;
            break;
        case KEY_UP:
            dir = UP;
            break;
        case KEY_DOWN:
            dir = DOWN;
            break;
            // we would use the key q for quit, but we changed it to a number form. q = 113
        case 113:
            gameOver = true;
            break;
    }
}
void Logic()
{
    //how the tail moves
    int prevX = TailX[0];
    int prevY = TailY[0];
    int prev2X,prev2Y;
    TailX[0] = x;
    TailY[0] = y;

    for (int i = 1; i < nTail; i++)
    {
        prev2X = TailX[i];
        prev2Y = TailX[i];
        TailX[i] = prevX;
        TailY[i] = prevY;
        prevX = prev2X;
        prevY = prev2Y;
    }


//moving the head
    switch(dir)
    {
        case LEFT:
            x--;
            break;
        case RIGHT:
            x++;
            break;
        case UP:
            y--;
            break;
        case DOWN:
            y++;
            break;
        default:
            break;
    }
//if statement that would end the game if the edge of the game board was hit
    if (x > width || x < 1 || y < 1 || y > height)
        gameOver = true;
// if statement which determines what happens to the snake after it eats a fruit
    if (x == FruitX && y == FruitY)
    {
        score++;
        FruitX = (rand() % width)+1;
        FruitY = (rand() % height)+1;
        nTail++;

    }
    //if the head of the snake collied's with the tail, game over. 
    for (int i = 0; i < nTail; i++)
        if (TailX[i] == x && TailY[i] == y)
        {
            gameOver = true;
        }
}

int main()
{
    Setup();

    while (!gameOver)
    {
        Draw();
        Input();
        Logic();
    }
    getch();
    endwin();
    return 0;

}
